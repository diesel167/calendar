{"version":3,"sources":["Components/CellBuild.js","Components/EventForm.js","Components/Event.js","Components/DayEventBuilder.js","Components/Builder.js","App.js","serviceWorker.js","index.js"],"names":["holidays","id","name","date","CellBuild","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","ifNotFirstToday","x","c","react_default","a","createElement","className","onClick","props","clickCell","month","$","css","state","holidaysState","_this2","indicatorForEventHolidays","nameOfClass","nameOfClassMore","todayDate","todayMonth","year","todayYear","cell","tabIndex","isNowDate","parsed","JSON","parse","stateXXX","time1","index","n","map","event","number","day","parseInt","substring","length","task","holiday","_this3","tempDate","Date","getMonth","getDate","React","Component","i","checked","EventForm","time2","disabled","afterAlert","onTaskChange","bind","assertThisInitialized","onTime1Change","onTime2Change","onSubmit","onDayChange","localStorage","getItem","clear","setItem","stringify","temp","ifValid","alert","setState","console","log","el","push","changeDEB","preventDefault","target","value","checkbox","timeStart","type","step","onChange","rows","Event","isSmall","eventTask","DayEventBuilder","selectedTime","storage","transit","table","skip","_loop","cells","k","rowspan","addZero","rowSpan","Components_Event","eventDelete","monthName","Components_EventForm","currentDate","months","Builder","storageForCellBuild","taskForCellBuild","kk","splice","y","clearLocalStorage","createTable","data","helpDate","getFullYear","helpOther","setDate","j","getDay","Components_CellBuild","setMonth","colSpan","dataState","Components_DayEventBuilder","App","Components_Builder","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.80ab4dd4.chunk.js","sourcesContent":["import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport $ from 'jquery';\r\n\r\n//holidays list\r\nlet holidays = [\r\n    {id:0,\r\n    name:\"New year\",\r\n    date:'01.01'},\r\n    {id:1,\r\n    name:\"Christmas\",\r\n    date:'01.07'},\r\n    {id:2,\r\n     name:\"Men's day\",\r\n     date:'02.23'},\r\n    {id:3,\r\n     name:\"Women's day\",\r\n     date:'03.08'},\r\n    {id:4,\r\n     name:\"Labor day\",\r\n     date:'05.01'},\r\n    {id:5,\r\n     name:\"Victory Day\",\r\n     date:'05.09'},\r\n    {id:6,\r\n     name:\"Independence day\",\r\n     date:'07.03'},\r\n    {id:7,\r\n     name:\"November revolution day\",\r\n     date:'11.07'}];\r\n\r\nclass CellBuild extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            holidaysState: holidays,\r\n         };\r\n    }\r\n\r\n    ifNotFirstToday=(x,c)=>{\r\n        if(x!==0){\r\n            return <div className={c}>{x} more events</div>\r\n        }\r\n    };\r\n\r\n    onClick=()=>{\r\n        this.props.clickCell(this.props.date,this.props.month);\r\n        $(function () {\r\n            $('table.main').css('opacity','.5');\r\n            $('.spacer').css('display','block');\r\n            $('table.dayEvents').css('display','table');\r\n        })\r\n    };\r\n\r\n    render(){\r\n        //counter of events for holiday day\r\n        let indicatorForEventHolidays=0;\r\n\r\n        //before today one color of event's block, after - another\r\n        let nameOfClass=\"additional_events\";\r\n        let nameOfClassMore=\"additional_events more\";\r\n\r\n\r\n        //calculate if the day is previous, then change it's classnames\r\n        if((this.props.date<this.props.todayDate && this.props.month===this.props.todayMonth && this.props.year===this.props.todayYear)||\r\n            (this.props.month<this.props.todayMonth && this.props.year<=this.props.todayYear) ){\r\n            nameOfClass=\"additional_events before\";\r\n            nameOfClassMore=\"additional_events before\";\r\n        }\r\n\r\n        //do default cell value if not holiday\r\n        let cell=<td tabIndex=\"0\" onClick={this.onClick}><div tabIndex=\"0\" className={this.props.isNowDate}><p>{this.props.date}</p></div></td>;\r\n\r\n        //parse storage taken from Builder-state which keeps actual localstorage value\r\n        let parsed=JSON.parse(this.props.stateXXX);\r\n\r\n        //search for event for day\r\n        if(parsed){\r\n            let time1=24;  //let initial time1 value to check which event will be first in the day\r\n            let index=0;  //index to control checking event\r\n            let n=0; //counter of events today\r\n\r\n            parsed.map((event,number)=>{\r\n                //if the event really today\r\n                if(event.month===this.props.month+1 && event.day===this.props.date && event.year===this.props.year){   //add  this YEAR CHECKER\r\n                    //if we meet earlier event\r\n                    if(parseInt(event.time1.substring(0, event.time1.length-3),10)<parseInt(time1,10)){\r\n                        //set cell with event information\r\n                        cell=<td tabIndex=\"0\" onClick={this.onClick}><div tabIndex=\"0\" className={this.props.isNowDate}><p>{this.props.date}</p>\r\n                            <div className={nameOfClass}>{event.task}</div>{this.ifNotFirstToday(n,nameOfClassMore)}</div></td>;\r\n                        time1=event.time1.substring(0, event.time1.length-3);   //set earliest time\r\n                        index=number;   //set index of earliest event in that day\r\n                        n++;  //set counter more than 1 event in that day\r\n                        indicatorForEventHolidays++;  //increment counter of events for holiday day\r\n                    }\r\n                    //if we meet not earlier event\r\n                    else{\r\n                        //set cell with event information\r\n                        cell=<td tabIndex=\"0\" onClick={this.onClick}><div tabIndex=\"0\" className={this.props.isNowDate}><p>{this.props.date}</p>\r\n                            <div className={nameOfClass}>{parsed[index].task}</div>{this.ifNotFirstToday(n,nameOfClassMore)}</div></td>;\r\n                        n++;\r\n                        indicatorForEventHolidays++;   //increment counter of events for holiday day\r\n                    }\r\n                }\r\n            },this);\r\n            index=0;\r\n            n=0;\r\n        }\r\n\r\n        //check for holiday day\r\n        this.state.holidaysState.map(function(holiday){\r\n            //create temporary date object from date parameter of holiday\r\n            let tempDate = new Date(holiday.date);\r\n            //if current day is holiday change a cell value for this day in calendar OR it has events\r\n            if(tempDate.getMonth()===this.props.month && tempDate.getDate()===this.props.date){\r\n\r\n                cell=<td tabIndex=\"0\" onClick={()=>{\r\n                    this.props.clickCell(this.props.date,this.props.month);\r\n                    $(function () {\r\n                        $('.spacer').css('display','block');\r\n                        $('table.main').css('opacity','.5');\r\n                        $('table.dayEvents').css('display','table');\r\n                    })}} className=\"holiday\"><div tabIndex=\"0\" className={this.props.isNowDate}><p>{this.props.date}</p></div>\r\n                    <p className=\"holiday\">{holiday.name}</p>{this.ifNotFirstToday(indicatorForEventHolidays,nameOfClassMore)}</td>;\r\n            }\r\n        },this);  //give CellBuilder as the context of map-function\r\n\r\n        return cell;\r\n    }\r\n}\r\n\r\nexport default CellBuild;\r\n\r\n\r\n","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport $ from 'jquery';\r\n\r\nlet i=false;   //helper variable to getDerivedStateFromProps work only once,and prevent working in case state.time1 changes\r\n                // and will !==props.timeStart (condition in  getDerivedStateFromProps)\r\nlet checked=''; //helper for checkbox\r\n\r\n\r\n//do 00:00 format for 1:00..9:00\r\nfunction addZero(n) {\r\n    return n.length > 4 ? n : '0' + n ;\r\n}\r\n\r\nclass EventForm extends React.Component {\r\n    monthName;\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            task: '',\r\n            time1:'00:00',\r\n            time2:'00:00',\r\n            disabled:false,\r\n            afterAlert:true //hide form after 'submit' click as default\r\n        };\r\n        this.onTaskChange = this.onTaskChange.bind(this);\r\n        this.onTime1Change = this.onTime1Change.bind(this);\r\n        this.onTime2Change = this.onTime2Change.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n        this.onDayChange = this.onDayChange.bind(this);\r\n    }\r\n\r\n    //if new props will be, this method will be called again\r\n    static getDerivedStateFromProps(props, state) {\r\n        if(state.time1 !== props.timeStart && i===false) {\r\n            i=true;\r\n            return {\r\n                time1: props.timeStart,   //set time1, time2 state\r\n                time2: addZero(parseInt(props.timeStart.substring(0,props.timeStart.length-3))+1+\":00\")\r\n            }\r\n        }\r\n        // Return null to indicate no change to state.\r\n        return null;\r\n    }\r\n\r\n\r\n\r\n    checkbox(){\r\n        if(checked===''){\r\n            checked='checked'\r\n        }\r\n        else{\r\n            checked=''\r\n        }\r\n    };\r\n\r\n    onSubmit(event){\r\n        //initialize localstorage\r\n        if (!localStorage.getItem(\"myEl\")){\r\n            //очищаем все хранилище\r\n            localStorage.clear();\r\n            let events=[];\r\n            localStorage.setItem(\"myEl\", JSON.stringify(events));\r\n        }\r\n\r\n        let temp=JSON.parse(localStorage.getItem(\"myEl\"));\r\n        let ifValid=true;\r\n        temp.map((event)=>{\r\n            if(event.day===this.props.day && event.month===this.props.month && event.year===this.props.year ){\r\n                //check for correct timing\r\n                if(parseInt(this.state.time2)>parseInt(event.time1)&&parseInt(this.state.time1)<=parseInt(event.time1)){\r\n                    alert('You have already event at this time');\r\n                    ifValid=false;\r\n                }\r\n            }\r\n        });\r\n        //check for min 1 hour length of event and time 2>time1\r\n        if(parseInt(this.state.time2)<=parseInt(this.state.time1)){\r\n            if(this.state.disabled===false){\r\n                alert('Check the time');\r\n                ifValid=false;\r\n                this.setState({task:''});  //clear task field\r\n            }\r\n        }\r\n\r\n        console.log(\"time2 =  \"+parseInt(this.state.time2));\r\n        console.log(\"time1 =  \"+parseInt(this.state.time1));\r\n        if (ifValid){\r\n            let el ={\r\n                day:this.props.day,\r\n                month:this.props.month,\r\n                year:this.props.year,\r\n                task:this.state.task,\r\n                time1:this.state.time1,\r\n                time2:this.state.time2\r\n            };\r\n            temp.push(el);\r\n            localStorage.setItem(\"myEl\", JSON.stringify(temp)); //write it in localstorage under key \"myKey\"\r\n            this.props.changeDEB(el.task);         //update DayEventBuilder's state\r\n            this.setState({task:''});  //clear task field\r\n            this.setState({disabled:false}); //set default time field focus\r\n            checked='';  //uncheck the checkbox\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n\r\n\r\n    onTaskChange(event){\r\n        this.setState({task: event.target.value});\r\n    }\r\n\r\n    onTime1Change(event){\r\n        this.setState({time1: event.target.value});\r\n    }\r\n\r\n    onTime2Change(event){\r\n        this.setState({time2: event.target.value});\r\n    }\r\n\r\n    onDayChange(){\r\n        this.checkbox();\r\n        if(this.state.disabled===false){\r\n            this.setState({time1: '00:00'});\r\n            this.setState({time2: '00:00'});\r\n            this.setState({disabled: true});\r\n        }\r\n        else{\r\n            this.setState({time1: this.props.timeStart});\r\n            this.setState({time2: this.props.timeStart});\r\n            this.setState({disabled:false});\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"form col-lg-6 col-md-6 col-sm-10 col-11\">\r\n                <button onClick={() => {   //EXIT button\r\n                    checked='';  //uncheck the checkbox\r\n                    this.setState({disabled:false}); //set default checkbox\r\n                    this.setState({task:''});  //clear task field\r\n                    i=false;   //set to default i variable\r\n                    $(function () {\r\n                        $('.dayEvents').css('zIndex','4');\r\n                        $('table').css('display', 'table');\r\n                        $('.form').css('display', 'none');\r\n                        $('table.dayEvents').css('opacity','1');\r\n                        $('table.main').css('opacity','.5');\r\n                    })\r\n                }}>&larr;</button>\r\n                <h1>Create task</h1>\r\n                <form onSubmit={this.onSubmit}>\r\n                    <div>\r\n                        <div className=\"time_handlers\">Time of beginning  </div>\r\n                        <label><input disabled={this.state.disabled} type=\"time\" step=\"3600\" name=\"time1\" value={this.state.time1}\r\n                                     onChange={this.onTime1Change}/></label>\r\n                        <br/>\r\n                        <div className=\"time_handlers\" >Time of the end  </div>\r\n                        <label><input disabled={this.state.disabled}  type=\"time\" step=\"3600\" name=\"time2\" value={this.state.time2}\r\n                                     onChange={this.onTime2Change}/></label>\r\n                    </div>\r\n                    <input type=\"checkbox\" checked={checked} name=\"allday\" value=\"allday\" onChange={this.onDayChange}/> All day <br/>\r\n                    <textarea className=\"tasktext\" name=\"com\" rows=\"3\" onChange={this.onTaskChange}  value={this.state.task}/>\r\n                    <p><input className=\"submitButton\" type=\"submit\" value=\"Submit\" onClick={() => {\r\n                        i=false;   //set to default i variable\r\n                        $(function () {\r\n                            $('.dayEvents').css('zIndex','4');\r\n                            $('table').css('display', 'table');\r\n                            $('.form').css('display', 'none');\r\n                            $('table.dayEvents').css('opacity','1');\r\n                            $('table.main').css('opacity','.5');\r\n                        })\r\n                        }} /></p>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EventForm;\r\n\r\n\r\n/* day handler in form\r\n<div className=\"time_handlers\">Day</div><label><input type=\"date\" id=\"start\" name=\"trip-start\"\r\n       name=\"day1\" value={this.state.time1)}  onChange={this.onTime1Change}/></label><br/>*/","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\n\r\n//this component was created fot control the size of event after click\r\n\r\nclass Event extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            isSmall:'inCellSmall',    //is the event block small or big already\r\n        };\r\n    }\r\n\r\n    render(){\r\n        return(<div className={this.state.isSmall} onClick={()=>{\r\n                                                                   console.log(this.state.isSmall);\r\n                                                                   if(this.state.isSmall===\"inCellSmall\"){\r\n                                                                       this.setState({isSmall:'inCellBig'})\r\n                                                                   }\r\n                                                                   else{\r\n                                                                       this.setState({isSmall:\"inCellSmall\"})\r\n                                                                   }\r\n                                                                 }\r\n                                                               }>{this.props.eventTask}</div>)\r\n    }\r\n}\r\n\r\nexport default Event;\r\n\r\n","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport EventForm from './EventForm.js';\r\nimport Event from './Event.js';\r\nimport $ from 'jquery';\r\n\r\nlet temp='00:00';\r\n\r\nclass DayEventBuilder extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isSmall:'inCellSmall',    //is the event block small or big already\r\n            day:this.props.day,             //take actual day and month of the clicked cell from CellBuild\r\n            month:this.props.month,\r\n            timeStart:'00:00',\r\n            storage:localStorage.getItem(\"myEl\")\r\n        };\r\n        this.selectedTime = this.selectedTime.bind(this);\r\n    }\r\n\r\n    //if new props will be, this method will be called again\r\n    static getDerivedStateFromProps(props, state) {\r\n        if((state.storage) !== localStorage.getItem(\"myEl\")) {\r\n            return {\r\n                storage:localStorage.getItem(\"myEl\")\r\n            };\r\n        }\r\n        if(state.timeStart!==temp){\r\n            return {\r\n                timeStart:temp\r\n            };\r\n        }\r\n        // Return null to indicate no change to state.\r\n        return null;\r\n    }\r\n\r\n    selectedTime=(x)=>{\r\n        this.setState({timeStart:x});\r\n        temp=x;\r\n    };\r\n\r\n    changeDEB=(x)=>{\r\n        this.setState({storage:localStorage.getItem(\"myEl\")});\r\n        this.props.transit(x);\r\n    };\r\n\r\n    //do 00:00 format for 1:00..9:00\r\n    addZero(n) {\r\n        return n.length > 4 ? n : '0' + n ;\r\n    };\r\n\r\n    render(){\r\n\r\n        let table=[];    //create table container\r\n        let rows=[];    //create rows container\r\n        let skip=0;   //skip <td> adding if needed\r\n\r\n        //build table\r\n        let parsed=JSON.parse(this.state.storage);\r\n        for (let i=0;i<25;i++){\r\n            let cells=[];   //create empty cells container\r\n\r\n            //left cell with time in row\r\n            cells.push(<td>{i+':00'}</td>);\r\n\r\n            //map parsed item \"myEl\" in localeStorage and draw event if needed\r\n            if(parsed){\r\n                parsed.map((event,k)=>{\r\n\r\n                    //check if the event really today\r\n                    if(this.addZero((i+':00'))===event.time1 && event.month===this.props.month && event.year===this.props.year && event.day===this.props.day ){\r\n                        let rowspan;\r\n                        //console.log((i+':00'));\r\n                        //console.log(event.time1);\r\n                        if(event.time2===\"00:00\"){\r\n                            rowspan = 24;   //calculate how long will the event be\r\n                        }\r\n                        else{\r\n                            rowspan = event.time2.substring(0, event.time2.length-3)-event.time1.substring(0, event.time1.length-3);   //calculate how long will the event be\r\n                        }\r\n\r\n                        cells.push(<td rowSpan={rowspan} className=\"setEvent\"><Event eventTask={event.task}/><button className=\"deleteOneEvent\"\r\n                                                                                                  onClick={() => {this.props.eventDelete(k)}}>delete</button></td>);\r\n                        skip=rowspan;   //set skip counter\r\n                    }\r\n                },this);\r\n            }\r\n\r\n\r\n\r\n            //draw empty right cell with the listener for adding event\r\n            if(skip<=0){   //if we finished skip <td> adding while event was\r\n                cells.push(<td onClick={() => {\r\n                    this.selectedTime(i+':00');\r\n                    $(function () {\r\n                        $('.dayEvents').css('zIndex','2');\r\n                        $('table.main').css('opacity','.3');\r\n                        $('.form').css('display', 'block');\r\n                    })\r\n                }}/>);\r\n            }\r\n            --skip;\r\n            rows.push(<tr>{cells}</tr>);\r\n        }\r\n\r\n        //create table and create exit button from events list\r\n\r\n        table.push(<table className=\"dayEvents col-lg-6 col-md-8 col-sm-10 col-11\"><thead><tr><th></th>\r\n            <th><div className='eventDate'><div>{this.props.monthName}</div><div>{this.props.day}</div></div><button onClick={() => {\r\n            this.setState({isSmall:\"inCellSmall\"});  //reset event blocks to small\r\n            $(function () {\r\n                $('.spacer').css('display','none');\r\n                $('table.main').css('opacity','1');    //EXIT button\r\n                $('table.dayEvents').css('display','none');\r\n            })\r\n        }\r\n        }>&#215;</button></th></tr></thead><tbody>{rows}</tbody></table>);\r\n\r\n\r\n        return (<div>\r\n                    <div>{table}</div>\r\n                    <EventForm month={this.props.month}\r\n                               timeStart={this.addZero(this.state.timeStart)}\r\n                               monthName={this.props.monthName}\r\n                               day={this.props.day}\r\n                               changeDEB={this.changeDEB}\r\n                               year={this.props.year}/>\r\n                </div>);\r\n    }\r\n}\r\n\r\nexport default DayEventBuilder;\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport CellBuild from './CellBuild.js';\r\nimport DayEventBuilder from './DayEventBuilder.js';\r\n\r\nlet currentDate= new Date();\r\nlet months = ['January','February','March','April','May','June','July','August','September','October','November','December'];\r\n\r\n//Builder calendar body\r\nclass Builder extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            dataState: this.props.helpDate,   //set date to build and display\r\n            storageForCellBuild:localStorage.getItem(\"myEl\")\r\n        };\r\n        this.transit=this.transit.bind(this);\r\n        this.eventDelete=this.eventDelete.bind(this)\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        if((state.storageForCellBuild) !== localStorage.getItem(\"myEl\")) {\r\n            return {\r\n                storageForCellBuild:localStorage.getItem(\"myEl\")\r\n            };\r\n        }\r\n        if((state.dataState)!==props.helpDate){\r\n            return{\r\n                dataState: props.helpDate\r\n            }\r\n        }\r\n        // Return null to indicate no change to state.\r\n        return null;\r\n    }\r\n\r\n    //callback transit function for DayEventBuilder changeDEB which is used in EventForm Submit click listener\r\n    transit=(x)=>{\r\n        this.setState({ storageForCellBuild:localStorage.getItem(\"myEl\")});\r\n        this.setState({taskForCellBuild:x});\r\n    };\r\n\r\n    //function for DELETE button in the cell for CellBuild\r\n    eventDelete=(kk)=>{\r\n        let temp=JSON.parse(localStorage.getItem(\"myEl\"));\r\n        temp.splice(kk,1);\r\n        localStorage.setItem(\"myEl\", JSON.stringify(temp)); //write it in localstorage under key \"myKey\"\r\n        this.setState({storageForCellBuild:localStorage.getItem(\"myEl\")});\r\n    };\r\n\r\n    //help function to control date parameters in cell which is clicked\r\n    clickCell=(x,y)=>{\r\n        this.setState({day:x});\r\n        this.setState({month:y});\r\n    };\r\n\r\n    //delete all user events\r\n    clearLocalStorage=()=>{\r\n        //очищаем все хранилище\r\n        localStorage.clear();\r\n        this.setState({ storageForCellBuild:localStorage.getItem(\"myEl\")});\r\n    };\r\n\r\n    createTable =(data)=>{\r\n\r\n        //create temp data objects\r\n        let helpDate = new Date(data.getFullYear(), data.getMonth(), data.getDate());    //help date for drawing\r\n\r\n        let helpOther = new Date(data.getFullYear(), data.getMonth(), data.getDate());   //help date for build previous month days\r\n\r\n        helpDate.setDate(1);\r\n        helpOther.setDate(1);\r\n\r\n        let table=[];    //create table container\r\n        let rows=[];    //create rows container\r\n\r\n        //outer loop for rows creating (filling rows container)\r\n        for(let i=0;i<6;i++){\r\n            let cells=[];   //create empty cells container\r\n\r\n            //inner loop for cells creating in row (filling cells container)\r\n            for (let j=0;j<7;j++){\r\n\r\n                //loop for draw previous month days and padding current 1st days relative days of week\r\n                if(i===0&&j<helpDate.getDay()-1){\r\n                    helpOther.setDate(-helpDate.getDay()+2+j);\r\n                    cells.push(<CellBuild stateXXX={this.state.storageForCellBuild}\r\n                                          taskForCellBuild={this.state.taskForCellBuild}\r\n                                          date={helpOther.getDate()}\r\n                                          clickCell={this.clickCell}\r\n                                          month={helpOther.getMonth()}\r\n                                          year={helpOther.getFullYear()}\r\n                                          isNowDate=\"numbers otherMonth\"\r\n                                          todayDate={currentDate.getDate()}\r\n                                          todayMonth={currentDate.getMonth()}\r\n                                          todayYear={currentDate.getFullYear()}/>);\r\n                    helpOther.setDate(1);       //to reset helpOther for next loop\r\n                    helpOther.setMonth(helpOther.getMonth()+1);     //to reset helpOther for next loop\r\n                }\r\n                //continue drawing calendar\r\n                else{\r\n                    //if current month\r\n                    if(helpDate.getMonth()===data.getMonth()){\r\n\r\n                        //checking for today\r\n                        if(helpDate.getDate()===currentDate.getDate()&&helpDate.getMonth()===currentDate.getMonth()&&helpDate.getFullYear()===currentDate.getFullYear()){\r\n\r\n                            cells.push(<CellBuild clickCell={this.clickCell}\r\n                                                  date={helpDate.getDate()}\r\n                                                  month={helpDate.getMonth()}\r\n                                                  year={helpOther.getFullYear()}\r\n                                                  stateXXX={this.state.storageForCellBuild}\r\n                                                  taskForCellBuild={this.state.taskForCellBuild}\r\n                                                  isNowDate=\"numbers nowDate\"\r\n                                                  todayDate={currentDate.getDate()}\r\n                                                  todayMonth={currentDate.getMonth()}\r\n                                                  todayYear={currentDate.getFullYear()}/>);\r\n\r\n\r\n                        }\r\n                        //if not today\r\n                        else{\r\n                            cells.push(<CellBuild clickCell={this.clickCell}\r\n                                                  date={helpDate.getDate()}\r\n                                                  month={helpDate.getMonth()}\r\n                                                  year={helpOther.getFullYear()}\r\n                                                  stateXXX={this.state.storageForCellBuild}\r\n                                                  taskForCellBuild={this.state.taskForCellBuild}\r\n                                                  isNowDate=\"numbers\"\r\n                                                  todayDate={currentDate.getDate()}\r\n                                                  todayMonth={currentDate.getMonth()}\r\n                                                  todayYear={currentDate.getFullYear()}/>); //join cell to cells container\r\n                        }\r\n                    }\r\n                    //next month days\r\n                    else{\r\n                        cells.push(<CellBuild stateXXX={this.state.storageForCellBuild}\r\n                                              taskForCellBuild={this.state.taskForCellBuild}\r\n                                              clickCell={this.clickCell}\r\n                                              date={helpDate.getDate()}\r\n                                              month={helpDate.getMonth()}\r\n                                              year={helpOther.getFullYear()}\r\n                                              isNowDate=\"numbers otherMonth\"\r\n                                              todayDate={currentDate.getDate()}\r\n                                              todayMonth={currentDate.getMonth()}\r\n                                              todayYear={currentDate.getFullYear()}/>); //join cell to cells container\r\n                    }\r\n                    helpDate.setDate(helpDate.getDate()+1);\r\n                }\r\n\r\n            }\r\n            rows.push(<tr>{cells}</tr>);    //join filled cells  container to rows container (join a row)\r\n        }\r\n\r\n        table.push(<table className=\"main col-lg-12 col-md-12 col-sm-12 col-xs-12\"><thead><tr><th colSpan={2}><button className=\"decrease\" onClick=\r\n            {() =>\r\n            {\r\n                data.setMonth(data.getMonth()-1);\r\n                this.setState({dataState:data});\r\n            }}>&larr;</button><div className=\"head\">{months[data.getMonth()]}</div><div className=\"head\">{data.getFullYear()}</div><button className=\"increase\" onClick=\r\n            {() =>\r\n            {\r\n                data.setMonth(data.getMonth()+1);\r\n                this.setState({dataState:data});\r\n            }}>&rarr;</button></th></tr></thead><tbody>{rows}</tbody></table>);  //join filled rows  container to table and make header\r\n\r\n        return table;\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"scontainer\">\r\n                <div className=\"calendar\">{this.createTable(this.state.dataState)}</div>\r\n                <br/>\r\n                <button className=\"deleteAllEv\" onClick={this.clearLocalStorage}>DELETE ALL EVENTS</button>\r\n\r\n                <DayEventBuilder day={this.state.day}\r\n                                 month={this.state.month+1}\r\n                                 transit={this.transit}\r\n                                 eventDelete={this.eventDelete}\r\n                                 monthName={months[this.state.month]}\r\n                                 year={this.state.dataState.getFullYear()}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Builder;\r\n\r\n\r\n","import 'bootstrap/dist/css/bootstrap.css';\r\nimport React from 'react';\r\nimport './App.css';\r\nimport Builder from './Components/Builder.js';\r\n\r\n\r\n\r\nlet helpDate = new Date();\r\n\r\n\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"spacer\"/>\r\n        <Builder helpDate={helpDate}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}