{"version":3,"sources":["Components/CellBuild.js","Components/DayEventBuilder.js","Components/Builder.js","App.js","serviceWorker.js","index.js"],"names":["holidays","id","name","date","CellBuild","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","holidaysState","cell","react_default","a","createElement","tabIndex","onClick","$","css","className","props","isNowDate","map","holiday","_this2","tempDate","Date","getMonth","month","getDate","setState","day","clickCell","React","Component","events","time1","time2","DayEventBuilder","table","rows","skip","i","cells","push","rowspan","substring","rowSpan","console","log","value","type","currentDate","months","Builder","createTable","data","helpDate","getFullYear","helpOther","setDate","j","getDay","Components_CellBuild","colSpan","setMonth","dataState","Components_DayEventBuilder","App","Components_Builder","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3affe124.chunk.js","sourcesContent":["import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport $ from 'jquery';\r\n\r\n//holidays list\r\n\r\nlet holidays = [\r\n    {id:0,\r\n    name:\"New year\",\r\n    date:'01.01'},\r\n    {id:1,\r\n    name:\"Christmas\",\r\n    date:'01.07'},\r\n    {id:2,\r\n     name:\"Men's day\",\r\n     date:'02.23'},\r\n    {id:3,\r\n     name:\"Women's day\",\r\n     date:'03.08'},\r\n    {id:4,\r\n     name:\"Labor day\",\r\n     date:'05.01'},\r\n    {id:5,\r\n     name:\"Victory Day\",\r\n     date:'05.09'},\r\n    {id:6,\r\n     name:\"Independence day\",\r\n     date:'07.03'},\r\n    {id:7,\r\n     name:\"November revolution day\",\r\n     date:'11.07'}];\r\n\r\n\r\nclass CellBuild extends React.Component {\r\n\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            holidaysState: holidays,\r\n        };\r\n    }\r\n\r\n    render(){\r\n        //do default cell value if not holiday\r\n        let cell=<td tabIndex=\"0\" onClick={() => {\r\n            $(function () {\r\n                $('table.main').css('opacity','.5');\r\n                $('table.dayEvents').css('display','table');\r\n            })\r\n        }\r\n        }><div tabIndex=\"0\" className={this.props.isNowDate}><p>{this.props.date}</p></div></td>;\r\n\r\n        //check for holiday day\r\n        this.state.holidaysState.map(function(holiday){\r\n            //create temporary date object from date parameter of holiday\r\n            let tempDate = new Date(holiday.date);\r\n\r\n            //if current day is holiday change a cell value for this day in calendar\r\n            if(tempDate.getMonth()===this.props.month&&tempDate.getDate()===this.props.date ){\r\n                cell=<td tabIndex=\"0\" onClick={() => {\r\n\r\n                    this.setState({day:this.props.date});    //set day in state to render actual DayEventBuilderComponent\r\n                    this.setState({month:this.props.month});    //set day in state to render actual DayEventBuilderComponent\r\n                    this.props.clickCell(this.state.day);\r\n                    $(function () {\r\n                        $('table.main').css('opacity','.5');\r\n                        $('table.dayEvents').css('display','table');\r\n                    });\r\n\r\n\r\n                }\r\n                } className=\"holiday\"><div tabIndex=\"0\" className={this.props.isNowDate}><p>{this.props.date}</p></div><p className=\"holiday\">{holiday.name}</p></td>;\r\n            }\r\n\r\n        },this);  //give CellBuilder as the context of map-function\r\n\r\n        return cell;\r\n    }\r\n}\r\n\r\n\r\nexport default CellBuild;\r\n\r\n\r\n","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport $ from 'jquery';\r\n\r\n\r\nlet events = [\r\n    {id:0,\r\n        date:\"2019.01.20\",\r\n        name:\"Event 1 for this day\",\r\n        time1:\"15:00\",\r\n        time2:\"19:00\"\r\n    },\r\n   /* {id:1,\r\n        date:\"2019.02.05\",\r\n        name:\"Event 2 for this day\",\r\n        time1:\"11:00\",\r\n        time2:\"12:00\"\r\n    }*/\r\n ];\r\n\r\n\r\n\r\nclass DayEventBuilder extends React.Component {\r\n\r\n    /*handleDescriptionChange: function(e) {\r\n        this.setState({description: e.target.value});\r\n    };\r\n\r\n    handleNameChange: function(e) {\r\n        this.setState({name: e.target.value});\r\n    };*/\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            day:this.props.day,             //take actual day and month of the clicked cell from CellBuild\r\n            month:this.props.month,\r\n        };\r\n    }\r\n    render(){\r\n        let table=[];    //create table container\r\n        let rows=[];    //create rows container\r\n        let skip=0;   //skip <td> adding if needed\r\n\r\n        //create table\r\n        for (let i=0;i<25;i++){\r\n            let cells=[];   //create empty cells container\r\n            cells.push(<td>{i+':00'}</td>);\r\n\r\n\r\n\r\n                if((i+':00')===events[0].time1){\r\n                    let rowspan = events[0].time2.substring(0, 2)-events[0].time1.substring(0, 2);   //calculate how long will the event be\r\n                    cells.push(<td rowSpan={rowspan} className=\"setEvent\">{events[0].name}</td>);\r\n                    skip=rowspan;   //set skip counter\r\n                }\r\n\r\n                if(skip<=0){   //if we finished skip <td> adding while event was\r\n                    cells.push(<td onClick={() => {\r\n                        $(function () {\r\n                            $('table.main').css('opacity','.3');\r\n                            $('table.dayEvents').css('opacity','.5');\r\n                            $('.form').css('display', 'block');\r\n                        })\r\n                    }}/>);\r\n                }\r\n                --skip;\r\n\r\n            rows.push(<tr>{cells}</tr>);\r\n        }\r\n\r\n        //create table and create exit button from events list\r\n        console.log('DayEventBuilder state.day ='+this.state.day);\r\n        table.push(<table className=\"dayEvents col-lg-6 col-md-8 col-sm-10 col-xs-10\"><thead><tr><th></th><th><button onClick={() => {\r\n            $(function () {\r\n                $('table.main').css('opacity','1');\r\n                $('table.dayEvents').css('display','none');\r\n            })\r\n        }\r\n        }>&#215;</button></th></tr></thead><tbody>{rows}</tbody></table>);\r\n\r\n\r\n        return (<div>\r\n                    <div>{table}</div>\r\n                    <div className=\"form col-lg-6 col-md-6 col-sm-8 col-xs-8\">\r\n                        <button onClick={() => {\r\n                            $(function () {\r\n                                $('table').css('display', 'table');\r\n                                $('.form').css('display', 'none');\r\n                                $('table.dayEvents').css('opacity','1');\r\n                                $('table.main').css('opacity','.5');\r\n                            })\r\n                        }}>&larr;</button>\r\n                        <form>\r\n                            <fieldset>\r\n                                <select className=\"form-control\">\r\n                                    <option value=\"one\">One</option>\r\n                                    <option value=\"two\">Two</option>\r\n                                    <option value=\"three\">Three</option>\r\n                                    <option value=\"four\">Four</option>\r\n                                    <option value=\"five\">Five</option>\r\n                                </select>\r\n                                <legend>Add the event</legend>\r\n                                <p>Description <input name=\"login\"/></p>\r\n                                <p><input type=\"submit\" value=\"Add\"/></p>\r\n                            </fieldset>\r\n                        </form>\r\n                    </div>\r\n            </div>);\r\n    }\r\n}\r\n\r\nexport default DayEventBuilder;","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport CellBuild from './CellBuild.js';\r\nimport DayEventBuilder from './DayEventBuilder.js';\r\nimport $ from 'jquery';\r\n\r\n\r\n\r\nlet currentDate= new Date();\r\nlet months = ['January','February','March','April','May','June','July','August','September','October','November','December'];\r\n//let month = currentDate.getMonth(); //current month\r\n//let year = currentDate.getFullYear();   //current year\r\n\r\n\r\n\r\n//Builder calendar body\r\nclass Builder extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            dataState: this.props.helpDate,   //set date to build and display\r\n        };\r\n    }\r\n\r\n   /* //help function to control date parameters in cell which is clicked\r\n    clickCell=x=>{\r\n        this.setState({day:x});\r\n    };              */\r\n\r\n    createTable =(data)=>{\r\n\r\n        let helpDate = new Date(data.getFullYear(), data.getMonth(), data.getDate());    //help date for drawing\r\n        let helpOther = new Date(data.getFullYear(), data.getMonth(), data.getDate());   //help date for build previous month days\r\n        helpDate.setDate(1);\r\n        helpOther.setDate(1);\r\n        let table=[];    //create table container\r\n        let rows=[];    //create rows container\r\n\r\n\r\n\r\n\r\n        //outer loop for rows creating (filling rows container)\r\n        for(let i=0;i<6;i++){\r\n            let cells=[];   //create empty cells container\r\n\r\n            //inner loop for cells creating in row (filling cells container)\r\n            for (let j=0;j<7;j++){\r\n\r\n                //loop for draw previous month days and padding current 1st days relative days of week\r\n                if(i===0&&j<helpDate.getDay()-1){\r\n                    helpOther.setDate(-helpDate.getDay()+2+j);\r\n\r\n                    cells.push(<CellBuild date={helpOther.getDate()} month={helpOther.getMonth()} isNowDate=\"numbers otherMonth\"/>);\r\n                }\r\n                //continue drawing calendar\r\n                else{\r\n                    //if current month\r\n                    if(helpDate.getMonth()===data.getMonth()){\r\n\r\n                        //checking for today\r\n                        if(helpDate.getDate()===currentDate.getDate()&&helpDate.getMonth()===currentDate.getMonth()&&helpDate.getFullYear()===currentDate.getFullYear()){\r\n\r\n                            cells.push(<CellBuild date={helpDate.getDate()} month={helpDate.getMonth()} isNowDate=\"numbers nowDate\"/>); //join cell to cells container\r\n                        }\r\n                        else{\r\n\r\n                            cells.push(<CellBuild clickCell={this.clickCell} date={helpDate.getDate()} month={helpDate.getMonth()} isNowDate=\"numbers\" />); //join cell to cells container\r\n\r\n                        }\r\n                    }\r\n                    //next month days\r\n                    else{\r\n                        cells.push(<CellBuild date={helpDate.getDate()} month={helpDate.getMonth()} isNowDate=\"numbers otherMonth\" />); //join cell to cells container\r\n                    }\r\n                    helpDate.setDate(helpDate.getDate()+1);\r\n                }\r\n\r\n            }\r\n            rows.push(<tr>{cells}</tr>);    //join filled cells  container to rows container (join a row)\r\n        }\r\n\r\n        table.push(<table className=\"main col-lg-12 col-md-12 col-sm-12 col-xs-12\"><thead><tr><th colSpan={2}><button className=\"decrease\" onClick=\r\n            {() =>\r\n            {\r\n                data.setMonth(data.getMonth()-1);\r\n                this.setState({dataState:data});\r\n            }}>&larr;</button><div className=\"head\">{months[data.getMonth()]}</div><div className=\"head\">{data.getFullYear()}</div><button className=\"increase\" onClick=\r\n            {() =>\r\n            {\r\n                data.setMonth(data.getMonth()+1);\r\n                this.setState({dataState:data});\r\n            }}>&rarr;</button></th></tr></thead><tbody>{rows}</tbody></table>);  //join filled rows  container to table and make header\r\n\r\n        return table;\r\n    };\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"calendar\">{this.createTable(this.state.dataState)}</div>\r\n                <DayEventBuilder/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Builder;\r\n\r\n\r\n","import 'bootstrap/dist/css/bootstrap.css';\r\nimport React from 'react';\r\nimport './App.css';\r\nimport Builder from './Components/Builder.js';\r\n\r\n\r\n\r\nlet helpDate = new Date();\r\n\r\n\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Builder helpDate={helpDate}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}